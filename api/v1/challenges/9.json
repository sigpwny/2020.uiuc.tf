{"success": true, "data": {"id": 9, "name": "Crazy_Caches", "value": 500, "description": "What's a translation lookaside buffer and why should I flush it?\r\n\r\nSince the `mmap` syscall isn't supported for sandboxed users, do I really need to update that page directory EVERY time I context switch? Sounds like a lot of extra work...\r\n\r\nIf you run `lsproc` you'll see there's a process called \"crazy_caches\" running concurrently on the system. You might also notice it's running with UID = 1 instead of UID = 2. `crazy_caches` uses the `mmap` system call to map some shared memory that it uses as a \"shared library\". \r\n\r\nFind a way to get `crazy_caches` to elevate the permission level of your current shell context, and you'll be awarded with a flag.\r\n\r\n**UPDATE**:\r\nThere was a discrepancy in the prior version of the pseudocode vs the actual implementation. This discrepancy has been fixed below.\r\n\r\ncrazy_caches pseudocode:\r\n```\r\nint main ():\r\n    byte *mmap_addr = syscall_mmap();\r\n    if (!mmap_addr):\r\n        print (\"[crazy_caches] Couldn't mmap!\")\r\n        return -1\r\n\r\n    while True:\r\n        for x = 0; x < 0x1000; x++:\r\n            mmap_addr[x] = 0xc3\r\n\r\n        while ((uint32_t *)mmap_addr)[0] != 0xdeadc0de:\r\n            wait()\r\n\r\n        call((method)((byte *)mmap_addr + 0x400))\r\n```\r\n\r\nAuthor: ravi", "category": "Kernel Exploitation", "state": "visible", "max_attempts": 0, "type": "standard", "type_data": {"id": "standard", "name": "standard", "templates": {"create": "/plugins/challenges/assets/create.html", "update": "/plugins/challenges/assets/update.html", "view": "/plugins/challenges/assets/view.html"}, "scripts": {"create": "/plugins/challenges/assets/create.js", "update": "/plugins/challenges/assets/update.js", "view": "/plugins/challenges/assets/view.js"}}, "solves": 9, "files": [], "tags": [], "hints": []}}
